name: Continuous Integration
on:
  push:
  pull_request_target:
    types: [labeled, synchronize, opened]

permissions:
  id-token: write
  contents: read
  pull-requests: write # for removing tags

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.event.pull_request.head.sha }}
  cancel-in-progress: true

jobs:
  permission_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check for Actor Permission
        id: check
        continue-on-error: true
        uses: prince-chrismc/check-actor-permissions-action@v3
        with:
          github_token: ${{ github.token }}
          permission: write
      - name: Debug Information
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Labels: ${{ toJson(github.event.pull_request.labels) }}"
          echo "Permitted: ${{ steps.check.outputs.permitted }}"
          echo "Safe to Test Label Present: ${{ contains(github.event.pull_request.labels.*.name, 'safe to test') }}"
      - name: Check PR Safe to Run
        if: ${{ github.event_name == 'pull_request_target' && !contains(github.event.pull_request.labels.*.name, 'safe to test') && steps.check.outputs.permitted == 'false' }}
        run: exit 1
      - name: Remove Safe to Test Label  # One commit is safe doesn't mean the next commit is safe.
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: 'safe to test'
  integration_test:
    needs: permission_check
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: ["3.10"]

    steps:
      - name: Checkout repository
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v4

      - name: Checkout repository(Pull Request Target)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: assistant_py3
          environment-file: .github/workflows_env/unittest_env.yml
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: "latest"

      - name: Setup OMP for macOS
        if: matrix.os == 'macos-latest'
        shell: bash -l {0}
        run: |
          wget https://raw.githubusercontent.com/Homebrew/homebrew-core/fb8323f2b170bd4ae97e1bac9bf3e2983af3fdb0/Formula/libomp.rb
          if brew list | grep -q libomp; then
            brew unlink libomp
          fi
          brew install libomp.rb
          rm libomp.rb

      - name: Check if changes beside docs
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            other_than_docs:
              - '!(docs/**)**'
      - name: Integration Test
        if: steps.changes.outputs.other_than_docs == 'true'
        uses: ./.github/actions/test-assistant
        with:
          aws-role-arn: ${{ secrets.AWS_CI_ROLE_ARN }}
          submodule-to-test: integration

  webui_test:
    needs: permission_check
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: ["3.10"]

    steps:
      - name: Checkout repository
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v4

      - name: Checkout repository(Pull Request Target)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: assistant_py3
          environment-file: .github/workflows_env/unittest_env.yml
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: "latest"

      - name: Check if changes beside docs
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            other_than_docs:
              - '!(docs/**)**'
      - name: WebUI Test
        if: steps.changes.outputs.other_than_docs == 'true'
        uses: ./.github/actions/test-assistant
        with:
          aws-role-arn: ${{ secrets.AWS_CI_ROLE_ARN }}
          submodule-to-test: webui

  mcp_test:
    needs: permission_check
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        python: ["3.10"]

    steps:
      - name: Checkout repository
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v4

      - name: Checkout repository(Pull Request Target)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: assistant_py3
          environment-file: .github/workflows_env/unittest_env.yml
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: "latest"

      - name: Check if changes beside docs
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            other_than_docs:
              - '!(docs/**)**'
            mcp_changes:
              - 'src/autogluon/mcp/**'
              - 'tests/unittests/mcp/**'
      
      - name: Install dependencies
        if: steps.changes.outputs.other_than_docs == 'true' && steps.changes.outputs.mcp_changes == 'true'
        shell: bash -l {0}
        run: |
          source .github/workflow_scripts/env_setup.sh
          install_all
          setup_test_env
          python -m pip install fastmcp aiohttp
          python -m pip install -e .
      
      - name: Stop existing services
        if: steps.changes.outputs.other_than_docs == 'true' && steps.changes.outputs.mcp_changes == 'true'
        shell: bash -l {0}
        run: |
          sudo lsof -ti:5000 | xargs -r sudo kill -9 || true
          pkill -f "mlzero-" || true
          pkill -f "autogluon.assistant.webui.backend" || true
      
      - name: Run MCP Test
        if: steps.changes.outputs.other_than_docs == 'true' && steps.changes.outputs.mcp_changes == 'true'
        shell: bash -l {0}
        env:
          PYTHONUNBUFFERED: "1"
          FORCE_COLOR: "1"
        run: |
          python -m pytest -n 1 -v --capture=tee-sys --log-cli-level=INFO tests/unittests/mcp/test_mcp_integration.py
